<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on Android Essence</title>
    <link>http://localhost:1313/tags/architecture/</link>
    <description>Recent content in Architecture on Android Essence</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 Aug 2019 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MVWTF&amp;#58; Demystifying Architecture Patterns</title>
      <link>http://localhost:1313/posts/2019-08-16-mvwtf/</link>
      <pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2019-08-16-mvwtf/</guid>
      
      <description>&lt;p&gt;As an Android developer, one of the questions I constantly see asked within the community is &amp;ldquo;what architecture pattern should I use?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;This discussion usually leads to a handful of buzzwordy acronyms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MVC&lt;/li&gt;
&lt;li&gt;MVP&lt;/li&gt;
&lt;li&gt;MVVM&lt;/li&gt;
&lt;li&gt;MVI&lt;/li&gt;
&lt;li&gt;MVU?? (We don&amp;rsquo;t talk about this but apparently it&amp;rsquo;s the new kid on the block)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This can be really intimidating to new Android devs, as well as seasoned veterans who are constantly questioning if they&amp;rsquo;re using the right one. Whether you&amp;rsquo;re trying to decide which one to learn, or wondering if the one you already use is best for you, this post will help lead you to the right decision.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Repository Pattern&amp;#58; Properly Organizing Your Data Layer</title>
      <link>http://localhost:1313/posts/2019-05-20-repository-pattern/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2019-05-20-repository-pattern/</guid>
      
      <description>&lt;p&gt;How to properly architect your application is a concern we as developers constantly face. There&amp;rsquo;s unfortunately no one size fits all answer to it, and sometimes we don&amp;rsquo;t even know where to begin. I&amp;rsquo;ve learned along my Android journey that the answer can also vary depending on what portion of your app you&amp;rsquo;re trying to organize. Of course, you might say, &lt;a href=&#34;https://handstandsam.com/2019/03/10/it-depends-is-the-answer-to-your-android-question/&#34;&gt;it depends&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When it comes to your data layer, though, there are some really good tips on how to write clean, maintainable code. One of them is the Repository Pattern, and I&amp;rsquo;d like to provide a quick walk through of what it is and why it&amp;rsquo;s important.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Building An Application With MVVM</title>
      <link>http://localhost:1313/posts/2018-10-28-building-an-app-with-mvvm/</link>
      <pubDate>Sun, 28 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2018-10-28-building-an-app-with-mvvm/</guid>
      
      <description>&lt;p&gt;This is the second post in what will be an ongoing series to demonstrate a few different architecture patterns that are used for Android development. You can find the code for each of them, often appearing before the blog posts, by following &lt;a href=&#34;https://github.com/AdamMc331/todo-monorepo&#34;&gt;this repo&lt;/a&gt;. Give it a star!&lt;/p&gt;
&lt;p&gt;In our [previous post]({{ site.baseurl }}{% link _posts/2018-10-20-building-an-app-with-mvp.md %}) we discussed the MVP architecture for building an app. This time, we&amp;rsquo;re going to check out MVVM.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Building An Application With MVP</title>
      <link>http://localhost:1313/posts/2018-10-20-building-an-app-with-mvp/</link>
      <pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2018-10-20-building-an-app-with-mvp/</guid>
      
      <description>&lt;p&gt;This is the first post in what will be an ongoing series to demonstrate a few different architecture patterns that are used for Android development. You can find the code for each of them, often appearing before the blog posts, by following &lt;a href=&#34;https://github.com/AdamMc331/todo-monorepo&#34;&gt;this repo&lt;/a&gt;. Give it a star!&lt;/p&gt;
&lt;p&gt;The first architecture pattern we&amp;rsquo;re going to walk through is MVP.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Breaking the Buzzwords Barrier Part 3&amp;#58; ViewModel</title>
      <link>http://localhost:1313/posts/2018-06-01-breaking-the-buzzwords-barrier-viewmodel/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2018-06-01-breaking-the-buzzwords-barrier-viewmodel/</guid>
      
      <description>&lt;p&gt;So far we&amp;rsquo;ve covered four big buzzwords used in our application:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Model-View-ViewModel&lt;/li&gt;
&lt;li&gt;Room&lt;/li&gt;
&lt;li&gt;RxJava&lt;/li&gt;
&lt;li&gt;Repository Pattern&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, we should circle back to the beginning. Following our diagram outlined in the [previous parts]({{ site.baseurl }}{% link _posts/2018-05-31-breaking-the-buzzwords-barrier-room-rx-repository.md %}), the next component we can begin to work on is our AccountViewModel:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/buzzwords/architecture_viewmodel.png&#34; alt=&#34;Android Essence&#34;&gt;&lt;/p&gt;
&lt;p&gt;Naturally, this may bring up some confusion. We already discussed ViewModels in [part 1]({{ site.baseurl }}{% link _posts/2018-05-30-breaking-the-buzzwords-barrier-mvvm.md %}). Well, depending on context, we may not be referring to the same thing.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Breaking the Buzzwords Barrier Part 2&amp;#58; Rx, Room, and Repository</title>
      <link>http://localhost:1313/posts/2018-05-31-breaking-the-buzzwords-barrier-room-rx-repository/</link>
      <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2018-05-31-breaking-the-buzzwords-barrier-room-rx-repository/</guid>
      
      <description>&lt;p&gt;In [part 1]({{ site.baseurl }}{% link _posts/2018-05-30-breaking-the-buzzwords-barrier-mvvm.md %}) we discussed how we were going to architect the various components of our application. Now it&amp;rsquo;s time to build them. To understand what we should build first, we should revisit the diagram:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/buzzwords/cashcaretaker_mvvm.png&#34; alt=&#34;MVVM&#34;&gt;&lt;/p&gt;
&lt;p&gt;I would start with three spots:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The account&lt;/li&gt;
&lt;li&gt;The database&lt;/li&gt;
&lt;li&gt;The repository&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A good rule of thumb to remember this, is that these nodes don&amp;rsquo;t depend on anything else just yet (well, the repository depends on the database, but that was included). I can&amp;rsquo;t build my ViewModel until I have my repository, and so on.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start with persistence.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Breaking the Buzzwords Barrier</title>
      <link>http://localhost:1313/posts/2018-05-29-breaking-the-buzzwords-barrier/</link>
      <pubDate>Wed, 30 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2018-05-29-breaking-the-buzzwords-barrier/</guid>
      
      <description>&lt;p&gt;MVVM? Retrofit? RxJava? Data binding? Architecture components? LiveData? Kotlin?&lt;/p&gt;
&lt;p&gt;Right now, these buzzwords are heard all over the Android community. Every podcast/blog/conference talk is referencing one of these. Which can be &lt;strong&gt;very&lt;/strong&gt; intimidating to new developers. Which one should I learn first? Do I need all of them? What are these things even used for?&lt;/p&gt;
&lt;p&gt;The purpose of this series is to break all of that down, and show that none of these buzzwords are truly that scary. We&amp;rsquo;ll go over an application I&amp;rsquo;ve published called &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.androidessence.cashcaretaker&#34;&gt;CashCaretaker&lt;/a&gt; which is a simple finance tracker with all data stored locally on the device. It uses all of the buzzwords I mentioned further up, and we can go through them step by step.&lt;/p&gt;
&lt;p&gt;You can checkout a simple gif of the project here:&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Breaking the Buzzwords Barrier Part 1&amp;#58; MVVM</title>
      <link>http://localhost:1313/posts/2018-05-30-breaking-the-buzzwords-barrier-mvvm/</link>
      <pubDate>Wed, 30 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2018-05-30-breaking-the-buzzwords-barrier-mvvm/</guid>
      
      <description>&lt;p&gt;When you&amp;rsquo;re starting out with Android development, and even as an expert, you will hear about a lot of different architecture patterns. Anything from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model-View-Controller&lt;/li&gt;
&lt;li&gt;Model-View-Presenter&lt;/li&gt;
&lt;li&gt;Model-View-ViewModel&lt;/li&gt;
&lt;li&gt;Model-View-Intent&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It can be extremely hard to know which one to pick, what their differences are, and why they matter. I will tell you that even with my three years of Android experience at the point of writing this, I have trouble answering the first two questions. I can, however, explain why these architecture patterns matter - and it boils down to the idea of separation of concerns.&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
