<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kotlin on Android Essence</title>
    <link>http://localhost:1313/tags/kotlin/</link>
    <description>Recent content in Kotlin on Android Essence</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Jun 2017 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/kotlin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding Nullability In Kotlin</title>
      <link>http://localhost:1313/posts/2017-06-28-understanding-nullability-in-kotlin/</link>
      <pubDate>Wed, 28 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2017-06-28-understanding-nullability-in-kotlin/</guid>
      
      <description>&lt;p&gt;Every Java programmer has faced the dreaded &lt;code&gt;NullPointerException&lt;/code&gt; at some point in their life. Sometimes it&amp;rsquo;s your fault, sometimes it&amp;rsquo;s a pesky race condition. Regardless, it&amp;rsquo;s a head ache and generally leads to a ton of &lt;code&gt;if (myVariable != null) { }&lt;/code&gt; conditions all over your code. However, the latest craze &lt;a href=&#34;https://kotlinlang.org&#34;&gt;Kotlin&lt;/a&gt; can help with that too. Kotlin introduced &lt;a href=&#34;https://kotlinlang.org/docs/reference/null-safety.html&#34;&gt;null safety&lt;/a&gt; into its type system, with the potential of removing all NPEs.&lt;/p&gt;
&lt;p&gt;This post is both going to review the official docs linked above, as well as provide some common tips and tricks to work with the nullability - something that is new in this language for many Java programmers.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Getting Started With Room Persistence Library</title>
      <link>http://localhost:1313/posts/2017-06-10-getting-started-with-room-persistence-library/</link>
      <pubDate>Sat, 10 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2017-06-10-getting-started-with-room-persistence-library/</guid>
      
      <description>&lt;p&gt;This year at Google I/O, the Android team announced &lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/index.html&#34;&gt;Android Architecture Components&lt;/a&gt; a combination of new, helpful libraries for Android development. One that particularly interested me was the &lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/room.html&#34;&gt;Room Persistence Library&lt;/a&gt;, which is an abstraction layer of SQLite designed to make database access and creation a lot easier. Right off the bat it reminded me of &lt;a href=&#34;https://realm.io/products/realm-mobile-database/&#34;&gt;Realm&lt;/a&gt;, which I learned about at &lt;a href=&#34;https://www.youtube.com/watch?v=QT7XD1hifkU&#34;&gt;Droidcon NYC&lt;/a&gt; and really admired, so I decided to dive in and build a todo list using Room &amp;amp; RxJava.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>How To Build A Todo List In Kotlin Part 1&amp;#58; Creating A New Project</title>
      <link>http://localhost:1313/posts/2017-05-21-how-to-build-a-todo-list-in-kotlin-part-1-new-project/</link>
      <pubDate>Sun, 21 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2017-05-21-how-to-build-a-todo-list-in-kotlin-part-1-new-project/</guid>
      
      <description>&lt;p&gt;This blog post is going to discuss creating a project from scratch in Kotlin. We will build a sample Todo List application that will not be very complicated, but covers enough to show the benefits of Kotlin. Part 1 will discuss creating a new project and configuring Kotlin. If you&amp;rsquo;re familiar with that, copy the &lt;code&gt;MainActivity.kt&lt;/code&gt; code and skip to part 2 to begin building the app.&lt;/p&gt;
&lt;p&gt;This tutorial assumes a basic knowledge of programming, and some familiarity with Android. If you have any questions please leave them in the comments, and I will udpate these posts with a deeper explanation.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>How To Build A Todo List In Kotlin Part 2&amp;#58; Implementing A RecyclerView</title>
      <link>http://localhost:1313/posts/2017-05-21-how-to-build-a-todo-list-in-kotlin-part-2-recyclerview/</link>
      <pubDate>Sun, 21 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2017-05-21-how-to-build-a-todo-list-in-kotlin-part-2-recyclerview/</guid>
      
      <description>&lt;p&gt;Following up on [part 2]({{ site.baseurl }}{% link _posts/2017-05-21-how-to-build-a-todo-list-in-kotlin-part-1-new-project.md %}) which demonstrates how to create your Android app and configure Kotlin, we&amp;rsquo;ll begin building the heart and soul of a Todo List application - the list!&lt;/p&gt;
&lt;h1 id=&#34;data-model&#34;&gt;Data Model&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s begin by defining our model. We&amp;rsquo;re going to create a simple class that has two fields, one for description and one for whether or not it&amp;rsquo;s completed. Here is how this class will look in Kotlin:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Task&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;completed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Boolean&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Serializable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You may not believe it, but that&amp;rsquo;s all we need. Let&amp;rsquo;s talk about what&amp;rsquo;s happening here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A data class is a special class in Kotlin that provides you with default behaviors for all your Object methods like &lt;code&gt;toString()&lt;/code&gt; &lt;code&gt;hashCode()&lt;/code&gt; &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;copy()&lt;/code&gt;. Read more &lt;a href=&#34;https://kotlinlang.org/docs/reference/data-classes.html&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Kotlin allows for default constructors to be defined right with the class name.&lt;/li&gt;
&lt;li&gt;Kotlin allows for default parameters. So in this case, we have a constructor that can be used as &lt;code&gt;Task(&amp;quot;Description&amp;quot;)&lt;/code&gt; and it will default to incomplete, or we can call it with &lt;code&gt;Task(&amp;quot;Description&amp;quot;, true)&lt;/code&gt; to set the initial value of the completed boolean.&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;ve had our class implement Serializable. In this simple app, we&amp;rsquo;re just going to save the data to a text file instead of over complicating it with SQLite.&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>How To Build A Todo List In Kotlin Part 3&amp;#58; Adding Items</title>
      <link>http://localhost:1313/posts/2017-05-21-how-to-build-a-todo-list-in-kotlin-part-3-adding-items/</link>
      <pubDate>Sun, 21 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2017-05-21-how-to-build-a-todo-list-in-kotlin-part-3-adding-items/</guid>
      
      <description>&lt;p&gt;Following parts [1]({{ site.baseurl }}{% link _posts/2017-05-21-how-to-build-a-todo-list-in-kotlin-part-1-new-project.md %}) and [2]({{ site.baseurl }}{% link _posts/2017-05-21-how-to-build-a-todo-list-in-kotlin-part-2-recyclerview.md %}) you should have a working Android app in Kotlin that displays a list of Tasks to be completed and lets you mark them as complete. This segment is going to show you how to implement support for adding new items.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>How To Build A Todo List In Kotlin Part 4&amp;#58; Storing Items</title>
      <link>http://localhost:1313/posts/2017-05-21-how-to-build-a-todo-list-in-kotlin-part-4-storing-items/</link>
      <pubDate>Sun, 21 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2017-05-21-how-to-build-a-todo-list-in-kotlin-part-4-storing-items/</guid>
      
      <description>&lt;p&gt;If you&amp;rsquo;ve been following along with parts 1-3, you now have an (almost) working todo list application. The only thing we are missing is persisting the data. Running your Android app now and rotating your screen will show you that the items you add won&amp;rsquo;t persist, and disappear anytime an activity is killed and recreated. This post will show you how to write the list to a text file and read from it.&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
