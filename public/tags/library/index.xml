<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Library on Android Essence</title>
    <link>http://localhost:1313/tags/library/</link>
    <description>Recent content in Library on Android Essence</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Oct 2017 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/library/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Developing And Publishing Android Libraries</title>
      <link>http://localhost:1313/posts/2017-10-19-developing-and-publishing-android-libraries/</link>
      <pubDate>Thu, 19 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2017-10-19-developing-and-publishing-android-libraries/</guid>
      
      <description>&lt;p&gt;Third party libraries are a huge part of mobile app development. Popular tools like Retrofit, RxJava, Picasso, and many others prevent Android developers from reinventing the wheel everytime we need to do something over the network, asynchronously, or loading images.&lt;/p&gt;
&lt;p&gt;However, developing and publishing these libraries can be intimidating to many people. I think this occurs for a number of reasons - worry about keeping up with maintenance, being outshined, or sometimes thinking no one would use your code. I have many thoughts on those ideas, but will save them for another blog post. In this one, we&amp;rsquo;ll just go over a step by step guide to creating and publishing a library to JCenter.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>RecyclerViewUtils Library Released</title>
      <link>http://localhost:1313/posts/2016-08-31-recyclerviewutils-library-released/</link>
      <pubDate>Wed, 31 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2016-08-31-recyclerviewutils-library-released/</guid>
      
      <description>&lt;p&gt;Recently, I became tired of writing the same old tedious code for every single RecyclerView and Adpater class I used, that all did the same thing, so I extrapolated all of it into a personal library.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/adammc331/RecyclerViewUtils&#34;&gt;RecyclerViewUtils&lt;/a&gt; library helps make everyone&amp;rsquo;s life a little easier with a CoreViewHolder and CoreAdapter class, described below.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>MaterialSearchView Library</title>
      <link>http://localhost:1313/posts/2016-04-22-materialsearchview-library/</link>
      <pubDate>Fri, 22 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2016-04-22-materialsearchview-library/</guid>
      
      <description>&lt;p&gt;Android has a built in SearchView component but it doesn&amp;rsquo;t feel much like Material Design. This has even been asked on &lt;a href=&#34;http://stackoverflow.com/questions/27556623/creating-a-searchview-that-looks-like-the-material-design-guidelines&#34;&gt;StackOverflow&lt;/a&gt; because developers are having trouble recreating the same MaterialSearchView that appears in many of Google&amp;rsquo;s applications. However, thanks to one of my good friends Maurício, you can now implement this great component in your own projects!&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>RichTextView Library Released</title>
      <link>http://localhost:1313/posts/2016-04-03-richtextview-library-released/</link>
      <pubDate>Sun, 03 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2016-04-03-richtextview-library-released/</guid>
      
      <description>&lt;p&gt;As a form of ultimate procrastination this weekend, I decided to spend the last two days developing a RichTextView library.&lt;/p&gt;
&lt;p&gt;This weekend I built the RichTextView (the naming convention comes from the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.windows.controls.richtextbox(v=vs.110).aspx&#34;&gt;RichTextBox&lt;/a&gt; C# class) which allows the user to format different parts ofa. TextView in different ways. For example, if I wanted to display a string but only bold a portion of it, I could achieve that with this class.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Material Design Specs Library</title>
      <link>http://localhost:1313/posts/2015-12-13-material-design-specs-library/</link>
      <pubDate>Sun, 13 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2015-12-13-material-design-specs-library/</guid>
      
      <description>&lt;p&gt;Along with the &lt;a href=&#34;http://androidessence.com/recyclerview-cursoradapter-library/&#34;&gt;RecyclerViewCursorAdapter library&lt;/a&gt; that was released earlier this week, I have now released my second open source Android library. In collaboration with my good friend &lt;a href=&#34;https://github.com/Mauker1&#34;&gt;Maurício&lt;/a&gt;, we have built a library for including the Material Design Specs in your Android application. Currently, the library has the full color palette along with some helper methods, and some elevation resources to give the proper elevation to your components. The source code, as well as instructions for including the library can be found on &lt;a href=&#34;https://github.com/androidessence/MaterialDesignSpecs&#34;&gt;GitHub&lt;/a&gt;, so go there to check it out and give us a star!&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>RecyclerViewCursorAdapter Library</title>
      <link>http://localhost:1313/posts/2015-12-10-recyclerviewcursoradapter-library/</link>
      <pubDate>Thu, 10 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2015-12-10-recyclerviewcursoradapter-library/</guid>
      
      <description>&lt;p&gt;Today I released my first library which is for a RecyclerviewCursorAdapter.&lt;/p&gt;
&lt;p&gt;Using a ListView to display database data becomes a lot easier when you use a CursorAdapter combined with a CursorLoader to display data from your ContentProvider. The main benefit of &lt;a href=&#34;http://developer.android.com/intl/pt-br/reference/android/content/CursorLoader.html&#34;&gt;CursorLoader&lt;/a&gt; is explained in the docs:&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Maintain Library Versions Across Modules</title>
      <link>http://localhost:1313/posts/2017-05-05-maintain-library-versions-across-modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2017-05-05-maintain-library-versions-across-modules/</guid>
      
      <description>&lt;p&gt;It is tough enough maintaing your app by updating the support library version numbers every time a new version is out, let alone factoring in any other third party libraries you may use. This is especially painful if you have multiple modules, as you have to update the version in each &lt;code&gt;build.gradle&lt;/code&gt; file. Thankfully, we can make use of the project level gradle file to make this more maintainable.&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
