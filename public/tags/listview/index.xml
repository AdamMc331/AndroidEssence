<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Listview on Android Essence</title>
    <link>http://localhost:1313/tags/listview/</link>
    <description>Recent content in Listview on Android Essence</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Sep 2015 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/listview/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RecyclerView VS ListView</title>
      <link>http://localhost:1313/posts/2015-09-07-recyclerview-vs-listview/</link>
      <pubDate>Mon, 07 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2015-09-07-recyclerview-vs-listview/</guid>
      
      <description>&lt;p&gt;Introduced in API 21 (Android 5.0), along with other MaterialDesign components, was the &lt;a href=&#34;https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html&#34;&gt;RecyclerView&lt;/a&gt; widget. This widget is a more flexible version of the &lt;a href=&#34;http://developer.android.com/reference/android/widget/ListView.html&#34;&gt;ListView&lt;/a&gt;, which to many developers was their go-to &lt;a href=&#34;http://developer.android.com/reference/android/widget/AdapterView.html&#34;&gt;AdapterView&lt;/a&gt; for applications.&lt;/p&gt;
&lt;p&gt;It is important to note here, though, that the RecyclerView does not extend from the AdapterView class. Intuitively, it sounds like it would as an AdapterView is defined in the docs as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An AdapterView is a view whose children are determined by an &lt;a href=&#34;http://developer.android.com/reference/android/widget/Adapter.html&#34;&gt;Adapter&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In the AdapterView design, the Adapter is the component responsible for mapping content from the data source to the Views of an AdapterView which are displayed to the user. Through the use of Adapters and LayoutManagers, the RecyclerView is able to break up responsibilities of the layout and create opportunities for more unique designs, which are explained in further detail later. Before we discuss the opportunities given to us by the RecyclerView, letâ€™s go over some of the benefits of the ListView (in comparison to the RecyclerView), and where it fell short.&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
