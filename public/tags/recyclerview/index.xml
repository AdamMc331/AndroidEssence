<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Recyclerview on Android Essence</title>
    <link>http://localhost:1313/tags/recyclerview/</link>
    <description>Recent content in Recyclerview on Android Essence</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 May 2017 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/recyclerview/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How To Build A Todo List In Kotlin Part 2&amp;#58; Implementing A RecyclerView</title>
      <link>http://localhost:1313/posts/2017-05-21-how-to-build-a-todo-list-in-kotlin-part-2-recyclerview/</link>
      <pubDate>Sun, 21 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2017-05-21-how-to-build-a-todo-list-in-kotlin-part-2-recyclerview/</guid>
      
      <description>&lt;p&gt;Following up on [part 2]({{ site.baseurl }}{% link _posts/2017-05-21-how-to-build-a-todo-list-in-kotlin-part-1-new-project.md %}) which demonstrates how to create your Android app and configure Kotlin, we&amp;rsquo;ll begin building the heart and soul of a Todo List application - the list!&lt;/p&gt;
&lt;h1 id=&#34;data-model&#34;&gt;Data Model&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s begin by defining our model. We&amp;rsquo;re going to create a simple class that has two fields, one for description and one for whether or not it&amp;rsquo;s completed. Here is how this class will look in Kotlin:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Task&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;completed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Boolean&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Serializable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You may not believe it, but that&amp;rsquo;s all we need. Let&amp;rsquo;s talk about what&amp;rsquo;s happening here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A data class is a special class in Kotlin that provides you with default behaviors for all your Object methods like &lt;code&gt;toString()&lt;/code&gt; &lt;code&gt;hashCode()&lt;/code&gt; &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;copy()&lt;/code&gt;. Read more &lt;a href=&#34;https://kotlinlang.org/docs/reference/data-classes.html&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Kotlin allows for default constructors to be defined right with the class name.&lt;/li&gt;
&lt;li&gt;Kotlin allows for default parameters. So in this case, we have a constructor that can be used as &lt;code&gt;Task(&amp;quot;Description&amp;quot;)&lt;/code&gt; and it will default to incomplete, or we can call it with &lt;code&gt;Task(&amp;quot;Description&amp;quot;, true)&lt;/code&gt; to set the initial value of the completed boolean.&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;ve had our class implement Serializable. In this simple app, we&amp;rsquo;re just going to save the data to a text file instead of over complicating it with SQLite.&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>RecyclerViewUtils Library Released</title>
      <link>http://localhost:1313/posts/2016-08-31-recyclerviewutils-library-released/</link>
      <pubDate>Wed, 31 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2016-08-31-recyclerviewutils-library-released/</guid>
      
      <description>&lt;p&gt;Recently, I became tired of writing the same old tedious code for every single RecyclerView and Adpater class I used, that all did the same thing, so I extrapolated all of it into a personal library.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/adammc331/RecyclerViewUtils&#34;&gt;RecyclerViewUtils&lt;/a&gt; library helps make everyone&amp;rsquo;s life a little easier with a CoreViewHolder and CoreAdapter class, described below.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>RecyclerViewCursorAdapter Library</title>
      <link>http://localhost:1313/posts/2015-12-10-recyclerviewcursoradapter-library/</link>
      <pubDate>Thu, 10 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2015-12-10-recyclerviewcursoradapter-library/</guid>
      
      <description>&lt;p&gt;Today I released my first library which is for a RecyclerviewCursorAdapter.&lt;/p&gt;
&lt;p&gt;Using a ListView to display database data becomes a lot easier when you use a CursorAdapter combined with a CursorLoader to display data from your ContentProvider. The main benefit of &lt;a href=&#34;http://developer.android.com/intl/pt-br/reference/android/content/CursorLoader.html&#34;&gt;CursorLoader&lt;/a&gt; is explained in the docs:&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>How To Use The RecyclerView Adapter</title>
      <link>http://localhost:1313/posts/2015-09-17-how-to-use-the-recyclerview-adapter/</link>
      <pubDate>Thu, 17 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2015-09-17-how-to-use-the-recyclerview-adapter/</guid>
      
      <description>&lt;p&gt;The &lt;a href=&#34;https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html&#34;&gt;RecyclerView.Adapter&lt;/a&gt; class is used to bind a dataset to a RecyclerView to be displayed to a user. As I explained in another post, [RecyclerView Vs ListView]({{ site.baseurl }}{% link _posts/2015-09-07-recyclerview-vs-listview.md %}), the RecyclerView.Adapter forces the use of the ViewHolder pattern, which may be hard to understand when switching to a RecyclerView from a ListView. In this short post I am going to reference my MovieAdapter class from my [Swipe-To-Dismiss]({{ site.baseurl }}{% link _posts/2015-09-09-swipe-to-dismiss-recyclerview-items.md %}) example, and break it down to explain the required implementations and how to use the RecyclerView adapter.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Drag And Drop RecyclerView Items</title>
      <link>http://localhost:1313/posts/2015-09-09-drag-and-drop-recyclerview-items/</link>
      <pubDate>Wed, 09 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2015-09-09-drag-and-drop-recyclerview-items/</guid>
      
      <description>&lt;p&gt;Before continuing this post, I recommend that you read my previous one on [Swipe To Dismiss RecyclerView Items]({{ site.baseurl }}{% link _posts/2015-09-09-swipe-to-dismiss-recyclerview-items.md %}) as this will build upon the &lt;code&gt;ItemTouchHelper&lt;/code&gt; class discussed there. Once you&amp;rsquo;ve done that, come back to this short post and learn how to drag and drop RecyclerView items like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/drag-and-drop.gif&#34; alt=&#34;Drag And Drop RecyclerView&#34;&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Swipe To Dismiss RecyclerView Items</title>
      <link>http://localhost:1313/posts/2015-09-09-swipe-to-dismiss-recyclerview-items/</link>
      <pubDate>Wed, 09 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2015-09-09-swipe-to-dismiss-recyclerview-items/</guid>
      
      <description>&lt;p&gt;In my last post I broke down the differences between the RecyclerView and a ListView. One of the benefits of the RecyclerView that I touched on was the &lt;a href=&#34;https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html&#34;&gt;ItemTouchHelper&lt;/a&gt;. This class is used to handle the Swipe-To-Dismiss and Drag-N-Drop behaviors of a RecyclerView. In this post I am going to teach you how to swipe to dismiss RecyclerView items using the sample application seen here:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/std-sample.gif&#34; alt=&#34;Swipe To Dismiss&#34;&gt;&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
