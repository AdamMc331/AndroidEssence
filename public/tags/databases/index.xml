<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Databases on Android Essence</title>
    <link>http://localhost:1313/tags/databases/</link>
    <description>Recent content in Databases on Android Essence</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/databases/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mastering Room Database Migrations</title>
      <link>http://localhost:1313/posts/2020-05-14-mastering-room-database-migrations/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2020-05-14-mastering-room-database-migrations/</guid>
      
      <description>&lt;p&gt;In the last post, we demonstrated the different types of [database relationships in Room]({{ site.baseurl }}{% link _posts/2020-04-27-room-relationship-recap.md %}). Next, we&amp;rsquo;re going to explore another niched concept of Room database management: database migrations. A migration is a way to handle moving from one version of a database to another as users update your application from the play store.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Room Relationship Recap</title>
      <link>http://localhost:1313/posts/2020-04-27-room-relationship-recap/</link>
      <pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2020-04-27-room-relationship-recap/</guid>
      
      <description>&lt;p&gt;In this post, we&amp;rsquo;re going to explore some advanced concepts of the &lt;a href=&#34;https://developer.android.com/training/data-storage/room&#34;&gt;Room Persistence Library&lt;/a&gt;. Room is a great tool for storing complex data for your Android applications inside a SQLite database. As you begin to store more data in your applications though, it can be difficult to determine how to organize all of it.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re going to demistify database organization, and break down everything you need to know about database relationships in the Room library.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Breaking the Buzzwords Barrier Part 2&amp;#58; Rx, Room, and Repository</title>
      <link>http://localhost:1313/posts/2018-05-31-breaking-the-buzzwords-barrier-room-rx-repository/</link>
      <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2018-05-31-breaking-the-buzzwords-barrier-room-rx-repository/</guid>
      
      <description>&lt;p&gt;In [part 1]({{ site.baseurl }}{% link _posts/2018-05-30-breaking-the-buzzwords-barrier-mvvm.md %}) we discussed how we were going to architect the various components of our application. Now it&amp;rsquo;s time to build them. To understand what we should build first, we should revisit the diagram:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/buzzwords/cashcaretaker_mvvm.png&#34; alt=&#34;MVVM&#34;&gt;&lt;/p&gt;
&lt;p&gt;I would start with three spots:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The account&lt;/li&gt;
&lt;li&gt;The database&lt;/li&gt;
&lt;li&gt;The repository&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A good rule of thumb to remember this, is that these nodes don&amp;rsquo;t depend on anything else just yet (well, the repository depends on the database, but that was included). I can&amp;rsquo;t build my ViewModel until I have my repository, and so on.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start with persistence.&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
