<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coroutines on Android Essence</title>
    <link>http://localhost:1313/tags/coroutines/</link>
    <description>Recent content in Coroutines on Android Essence</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Apr 2019 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/coroutines/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unit Testing RxJava or Coroutine Code With Constructor Injection</title>
      <link>http://localhost:1313/posts/2019-04-30-unit-testing-async-code/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2019-04-30-unit-testing-async-code/</guid>
      
      <description>&lt;p&gt;Putting aside the long lasting debate right now about whether you should use RxJava or coroutines for your asynchronous code on Android, both camps often hit the same problem. How do I write unit tests for this?&lt;/p&gt;
&lt;p&gt;Unit testing asynchronous code is tricky, because we may need to know how to properly test callback APIs, or perhaps we just want things to run instantly and not worry about thread changes. We may also be wondering how to handle not having a &amp;ldquo;main&amp;rdquo; thread in a junit test, unlike a connected test. This post will be focusing on handling that last one.&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
